class EmployeePersonnelChange < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[EmployeePersonnelChange, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def company_id: () -> Integer

    def company_id=: (Integer) -> Integer

    def company_id?: () -> bool

    def company_id_changed?: () -> bool

    def company_id_change: () -> [ Integer?, Integer? ]

    def company_id_will_change!: () -> void

    def company_id_was: () -> Integer?

    def company_id_previously_changed?: () -> bool

    def company_id_previous_change: () -> Array[Integer?]?

    def company_id_previously_was: () -> Integer?

    def company_id_before_last_save: () -> Integer?

    def company_id_change_to_be_saved: () -> Array[Integer?]?

    def company_id_in_database: () -> Integer?

    def saved_change_to_company_id: () -> Array[Integer?]?

    def saved_change_to_company_id?: () -> bool

    def will_save_change_to_company_id?: () -> bool

    def restore_company_id!: () -> void

    def clear_company_id_change: () -> void

    def employee_id: () -> Integer

    def employee_id=: (Integer) -> Integer

    def employee_id?: () -> bool

    def employee_id_changed?: () -> bool

    def employee_id_change: () -> [ Integer?, Integer? ]

    def employee_id_will_change!: () -> void

    def employee_id_was: () -> Integer?

    def employee_id_previously_changed?: () -> bool

    def employee_id_previous_change: () -> Array[Integer?]?

    def employee_id_previously_was: () -> Integer?

    def employee_id_before_last_save: () -> Integer?

    def employee_id_change_to_be_saved: () -> Array[Integer?]?

    def employee_id_in_database: () -> Integer?

    def saved_change_to_employee_id: () -> Array[Integer?]?

    def saved_change_to_employee_id?: () -> bool

    def will_save_change_to_employee_id?: () -> bool

    def restore_employee_id!: () -> void

    def clear_employee_id_change: () -> void

    def start_on: () -> Date

    def start_on=: (Date) -> Date

    def start_on?: () -> bool

    def start_on_changed?: () -> bool

    def start_on_change: () -> [ Date?, Date? ]

    def start_on_will_change!: () -> void

    def start_on_was: () -> Date?

    def start_on_previously_changed?: () -> bool

    def start_on_previous_change: () -> Array[Date?]?

    def start_on_previously_was: () -> Date?

    def start_on_before_last_save: () -> Date?

    def start_on_change_to_be_saved: () -> Array[Date?]?

    def start_on_in_database: () -> Date?

    def saved_change_to_start_on: () -> Array[Date?]?

    def saved_change_to_start_on?: () -> bool

    def will_save_change_to_start_on?: () -> bool

    def restore_start_on!: () -> void

    def clear_start_on_change: () -> void

    def office_id: () -> Integer?

    def office_id=: (Integer?) -> Integer?

    def office_id?: () -> bool

    def office_id_changed?: () -> bool

    def office_id_change: () -> [ Integer?, Integer? ]

    def office_id_will_change!: () -> void

    def office_id_was: () -> Integer?

    def office_id_previously_changed?: () -> bool

    def office_id_previous_change: () -> Array[Integer?]?

    def office_id_previously_was: () -> Integer?

    def office_id_before_last_save: () -> Integer?

    def office_id_change_to_be_saved: () -> Array[Integer?]?

    def office_id_in_database: () -> Integer?

    def saved_change_to_office_id: () -> Array[Integer?]?

    def saved_change_to_office_id?: () -> bool

    def will_save_change_to_office_id?: () -> bool

    def restore_office_id!: () -> void

    def clear_office_id_change: () -> void

    def department_id: () -> Integer?

    def department_id=: (Integer?) -> Integer?

    def department_id?: () -> bool

    def department_id_changed?: () -> bool

    def department_id_change: () -> [ Integer?, Integer? ]

    def department_id_will_change!: () -> void

    def department_id_was: () -> Integer?

    def department_id_previously_changed?: () -> bool

    def department_id_previous_change: () -> Array[Integer?]?

    def department_id_previously_was: () -> Integer?

    def department_id_before_last_save: () -> Integer?

    def department_id_change_to_be_saved: () -> Array[Integer?]?

    def department_id_in_database: () -> Integer?

    def saved_change_to_department_id: () -> Array[Integer?]?

    def saved_change_to_department_id?: () -> bool

    def will_save_change_to_department_id?: () -> bool

    def restore_department_id!: () -> void

    def clear_department_id_change: () -> void

    def post_id: () -> Integer?

    def post_id=: (Integer?) -> Integer?

    def post_id?: () -> bool

    def post_id_changed?: () -> bool

    def post_id_change: () -> [ Integer?, Integer? ]

    def post_id_will_change!: () -> void

    def post_id_was: () -> Integer?

    def post_id_previously_changed?: () -> bool

    def post_id_previous_change: () -> Array[Integer?]?

    def post_id_previously_was: () -> Integer?

    def post_id_before_last_save: () -> Integer?

    def post_id_change_to_be_saved: () -> Array[Integer?]?

    def post_id_in_database: () -> Integer?

    def saved_change_to_post_id: () -> Array[Integer?]?

    def saved_change_to_post_id?: () -> bool

    def will_save_change_to_post_id?: () -> bool

    def restore_post_id!: () -> void

    def clear_post_id_change: () -> void

    def occupation_id: () -> Integer?

    def occupation_id=: (Integer?) -> Integer?

    def occupation_id?: () -> bool

    def occupation_id_changed?: () -> bool

    def occupation_id_change: () -> [ Integer?, Integer? ]

    def occupation_id_will_change!: () -> void

    def occupation_id_was: () -> Integer?

    def occupation_id_previously_changed?: () -> bool

    def occupation_id_previous_change: () -> Array[Integer?]?

    def occupation_id_previously_was: () -> Integer?

    def occupation_id_before_last_save: () -> Integer?

    def occupation_id_change_to_be_saved: () -> Array[Integer?]?

    def occupation_id_in_database: () -> Integer?

    def saved_change_to_occupation_id: () -> Array[Integer?]?

    def saved_change_to_occupation_id?: () -> bool

    def will_save_change_to_occupation_id?: () -> bool

    def restore_occupation_id!: () -> void

    def clear_occupation_id_change: () -> void

    def grade_id: () -> Integer?

    def grade_id=: (Integer?) -> Integer?

    def grade_id?: () -> bool

    def grade_id_changed?: () -> bool

    def grade_id_change: () -> [ Integer?, Integer? ]

    def grade_id_will_change!: () -> void

    def grade_id_was: () -> Integer?

    def grade_id_previously_changed?: () -> bool

    def grade_id_previous_change: () -> Array[Integer?]?

    def grade_id_previously_was: () -> Integer?

    def grade_id_before_last_save: () -> Integer?

    def grade_id_change_to_be_saved: () -> Array[Integer?]?

    def grade_id_in_database: () -> Integer?

    def saved_change_to_grade_id: () -> Array[Integer?]?

    def saved_change_to_grade_id?: () -> bool

    def will_save_change_to_grade_id?: () -> bool

    def restore_grade_id!: () -> void

    def clear_grade_id_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def company: () -> Company
  def company=: (Company?) -> Company?
  def reload_company: () -> Company?
  def build_company: (untyped) -> Company
  def create_company: (untyped) -> Company
  def create_company!: (untyped) -> Company
  def employee: () -> Employee
  def employee=: (Employee?) -> Employee?
  def reload_employee: () -> Employee?
  def build_employee: (untyped) -> Employee
  def create_employee: (untyped) -> Employee
  def create_employee!: (untyped) -> Employee
  def office: () -> Office
  def office=: (Office?) -> Office?
  def reload_office: () -> Office?
  def build_office: (untyped) -> Office
  def create_office: (untyped) -> Office
  def create_office!: (untyped) -> Office
  def department: () -> Department
  def department=: (Department?) -> Department?
  def reload_department: () -> Department?
  def build_department: (untyped) -> Department
  def create_department: (untyped) -> Department
  def create_department!: (untyped) -> Department
  def post: () -> Post
  def post=: (Post?) -> Post?
  def reload_post: () -> Post?
  def build_post: (untyped) -> Post
  def create_post: (untyped) -> Post
  def create_post!: (untyped) -> Post
  def occupation: () -> Occupation
  def occupation=: (Occupation?) -> Occupation?
  def reload_occupation: () -> Occupation?
  def build_occupation: (untyped) -> Occupation
  def create_occupation: (untyped) -> Occupation
  def create_occupation!: (untyped) -> Occupation
  def grade: () -> Grade
  def grade=: (Grade?) -> Grade?
  def reload_grade: () -> Grade?
  def build_grade: (untyped) -> Grade
  def create_grade: (untyped) -> Grade
  def create_grade!: (untyped) -> Grade
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[EmployeePersonnelChange, Integer]
    include Enumerable[EmployeePersonnelChange]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[EmployeePersonnelChange, Integer]
  end
end
