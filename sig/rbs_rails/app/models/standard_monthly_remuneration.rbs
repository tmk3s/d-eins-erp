class StandardMonthlyRemuneration < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[StandardMonthlyRemuneration, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def start_on: () -> Date

    def start_on=: (Date) -> Date

    def start_on?: () -> bool

    def start_on_changed?: () -> bool

    def start_on_change: () -> [ Date?, Date? ]

    def start_on_will_change!: () -> void

    def start_on_was: () -> Date?

    def start_on_previously_changed?: () -> bool

    def start_on_previous_change: () -> Array[Date?]?

    def start_on_previously_was: () -> Date?

    def start_on_before_last_save: () -> Date?

    def start_on_change_to_be_saved: () -> Array[Date?]?

    def start_on_in_database: () -> Date?

    def saved_change_to_start_on: () -> Array[Date?]?

    def saved_change_to_start_on?: () -> bool

    def will_save_change_to_start_on?: () -> bool

    def restore_start_on!: () -> void

    def clear_start_on_change: () -> void

    def insurance_type: () -> Integer

    def insurance_type=: (Integer) -> Integer

    def insurance_type?: () -> bool

    def insurance_type_changed?: () -> bool

    def insurance_type_change: () -> [ Integer?, Integer? ]

    def insurance_type_will_change!: () -> void

    def insurance_type_was: () -> Integer?

    def insurance_type_previously_changed?: () -> bool

    def insurance_type_previous_change: () -> Array[Integer?]?

    def insurance_type_previously_was: () -> Integer?

    def insurance_type_before_last_save: () -> Integer?

    def insurance_type_change_to_be_saved: () -> Array[Integer?]?

    def insurance_type_in_database: () -> Integer?

    def saved_change_to_insurance_type: () -> Array[Integer?]?

    def saved_change_to_insurance_type?: () -> bool

    def will_save_change_to_insurance_type?: () -> bool

    def restore_insurance_type!: () -> void

    def clear_insurance_type_change: () -> void

    def rank: () -> Integer

    def rank=: (Integer) -> Integer

    def rank?: () -> bool

    def rank_changed?: () -> bool

    def rank_change: () -> [ Integer?, Integer? ]

    def rank_will_change!: () -> void

    def rank_was: () -> Integer?

    def rank_previously_changed?: () -> bool

    def rank_previous_change: () -> Array[Integer?]?

    def rank_previously_was: () -> Integer?

    def rank_before_last_save: () -> Integer?

    def rank_change_to_be_saved: () -> Array[Integer?]?

    def rank_in_database: () -> Integer?

    def saved_change_to_rank: () -> Array[Integer?]?

    def saved_change_to_rank?: () -> bool

    def will_save_change_to_rank?: () -> bool

    def restore_rank!: () -> void

    def clear_rank_change: () -> void

    def monthly_amount: () -> String

    def monthly_amount=: (String) -> String

    def monthly_amount?: () -> bool

    def monthly_amount_changed?: () -> bool

    def monthly_amount_change: () -> [ String?, String? ]

    def monthly_amount_will_change!: () -> void

    def monthly_amount_was: () -> String?

    def monthly_amount_previously_changed?: () -> bool

    def monthly_amount_previous_change: () -> Array[String?]?

    def monthly_amount_previously_was: () -> String?

    def monthly_amount_before_last_save: () -> String?

    def monthly_amount_change_to_be_saved: () -> Array[String?]?

    def monthly_amount_in_database: () -> String?

    def saved_change_to_monthly_amount: () -> Array[String?]?

    def saved_change_to_monthly_amount?: () -> bool

    def will_save_change_to_monthly_amount?: () -> bool

    def restore_monthly_amount!: () -> void

    def clear_monthly_amount_change: () -> void

    def daily_amount: () -> String?

    def daily_amount=: (String?) -> String?

    def daily_amount?: () -> bool

    def daily_amount_changed?: () -> bool

    def daily_amount_change: () -> [ String?, String? ]

    def daily_amount_will_change!: () -> void

    def daily_amount_was: () -> String?

    def daily_amount_previously_changed?: () -> bool

    def daily_amount_previous_change: () -> Array[String?]?

    def daily_amount_previously_was: () -> String?

    def daily_amount_before_last_save: () -> String?

    def daily_amount_change_to_be_saved: () -> Array[String?]?

    def daily_amount_in_database: () -> String?

    def saved_change_to_daily_amount: () -> Array[String?]?

    def saved_change_to_daily_amount?: () -> bool

    def will_save_change_to_daily_amount?: () -> bool

    def restore_daily_amount!: () -> void

    def clear_daily_amount_change: () -> void

    def monthly_remuneration_from: () -> String?

    def monthly_remuneration_from=: (String?) -> String?

    def monthly_remuneration_from?: () -> bool

    def monthly_remuneration_from_changed?: () -> bool

    def monthly_remuneration_from_change: () -> [ String?, String? ]

    def monthly_remuneration_from_will_change!: () -> void

    def monthly_remuneration_from_was: () -> String?

    def monthly_remuneration_from_previously_changed?: () -> bool

    def monthly_remuneration_from_previous_change: () -> Array[String?]?

    def monthly_remuneration_from_previously_was: () -> String?

    def monthly_remuneration_from_before_last_save: () -> String?

    def monthly_remuneration_from_change_to_be_saved: () -> Array[String?]?

    def monthly_remuneration_from_in_database: () -> String?

    def saved_change_to_monthly_remuneration_from: () -> Array[String?]?

    def saved_change_to_monthly_remuneration_from?: () -> bool

    def will_save_change_to_monthly_remuneration_from?: () -> bool

    def restore_monthly_remuneration_from!: () -> void

    def clear_monthly_remuneration_from_change: () -> void

    def monthly_remuneration_to: () -> String?

    def monthly_remuneration_to=: (String?) -> String?

    def monthly_remuneration_to?: () -> bool

    def monthly_remuneration_to_changed?: () -> bool

    def monthly_remuneration_to_change: () -> [ String?, String? ]

    def monthly_remuneration_to_will_change!: () -> void

    def monthly_remuneration_to_was: () -> String?

    def monthly_remuneration_to_previously_changed?: () -> bool

    def monthly_remuneration_to_previous_change: () -> Array[String?]?

    def monthly_remuneration_to_previously_was: () -> String?

    def monthly_remuneration_to_before_last_save: () -> String?

    def monthly_remuneration_to_change_to_be_saved: () -> Array[String?]?

    def monthly_remuneration_to_in_database: () -> String?

    def saved_change_to_monthly_remuneration_to: () -> Array[String?]?

    def saved_change_to_monthly_remuneration_to?: () -> bool

    def will_save_change_to_monthly_remuneration_to?: () -> bool

    def restore_monthly_remuneration_to!: () -> void

    def clear_monthly_remuneration_to_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[StandardMonthlyRemuneration, Integer]
    include Enumerable[StandardMonthlyRemuneration]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[StandardMonthlyRemuneration, Integer]
  end
end
